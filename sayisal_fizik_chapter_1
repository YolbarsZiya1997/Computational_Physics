#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Mar  1 12:08:14 2021

@author: ziya
"""
# The derivative example
'''
# from math import *
# def f(x):
#     return sin(x)
# a=1.0
# h=0.1
# for i in range(14):
#     f1=(f(a+h)-f(a))/h
#     print('%.12f'% h,'%.10f' % f1,'%.10f' % float(cos(a)-1))
#     h=h/10.0
'''
# Exercise 1.3    
'''
# from math import *
# def f(x):
#     return x*(sqrt(x+1)-sqrt(x))
# def g(h):
#     return h/(sqrt(h+1)+sqrt(h))
# print(f(100000),g(100000))
'''
 # Exercise 1.4
'''
from math import *
def f(x):
    return 1-cos(x)
def g(y):
    return log(y+1)-log(y)
def h(z):
    return (cos(z))**2-(sin(z))**2
def p(c):
    return sqrt(c**2+1)-c
def d(e):
    return sin(e)-cos(e)
def a(b):
    return exp(3*b)-3*exp(2*b)+5*exp(b)-1
pi=3.14
print(f(0.001),g(1000),h(0.249*pi),p(1000),d(0.249*pi),a(10))      
'''
# Exercise 1.5
'''
from math import *
a=float(input('First variable: '))
b=float(input('Second varble: '))
c=float(input('Third one: '))
delta=b**2-4*a*c

x1=(-b-sqrt(delta))/2*a
x2=c/x1

print(x1,x2)
'''
# Exercies karşılaştırma
'''
from math import *
def f(x):
    return tan(x)
def f1(x):
    return 1/cos(x)**2
h = 0.001
for i in range(3):
    x=float(i+1)
    f1_ileri=(f(x+h)-f(x))/h
    f1_geri=(f(x)-f(x-h))/h
    f1_simetrik=(f(x+h)-f(x-h))/(2*h)
    f1_tam=f1(x)
    print('%.10f' % f1_ileri,'%.10f' % f1_geri, '%.10f' % f1_simetrik, '%.10f' % f1_tam)
'''
 # Adım aralığının önemi
'''
from math import *
def f(x):
    return exp(x)
def f1(x):
    return exp(x)
h=0.1
x=1.0

for i in range(12):
    f1_simetrik=(f(x+h)-f(x-h))/(2*h)
    f1_tam=f1(x)
    fark = f1_tam-f1_simetrik
    print('%.12f' % h, '%.10f' % f1_simetrik,'%.10f' %f1_tam, '%.10f' % fark )
    h=h/10.0
'''
#Bir boyutta hareket 
'''
from pylab import *
from numpy import *
def f(x,v,t):
    return -x
n = 2000
h = 6.28/float(n)
t = zeros(n,float)
v = zeros(n,float)
x = zeros(n,float)
v[0] = 5.0
for i in range(1,n):
    t[i]=h*i
    x[i]=v[i-1]*h+x[i-1]
    v[i]=v[i-1]+h*f(x[i-1],v[i-1],t[i-1])
plot(t,x,'k-')
plot(t,v,'k--')
xlabel('t')
ylabel('y = sin x ve y = cos x')
show()
'''
# Simpson and Trapez yöntemi (integral almada)
'''
from numpy import *
def f(x):
    return exp(x)
def trapez(a,b,n):
    if n<1 or a>b:
        print('hatalı veri')
    else:
        h=(b-a)/n
        s=(f(a)+f(b))/2
        for i in range(1,n):
            x=a+i*h
            s=s+f(x)
        return h*s
def simpson(a,b,n):
    if n<1 or a>b:
        print('hatalı veri')
    elif n%2==1:
        print('n çift değil')
    else:
        h=(b-a)/n
        s=f(a)+f(b)
        for i in range(1,n):
            katsayi=2*(i%2+1)
            x=a+i*h
            s=s+katsayi*f(x)
        return h*s/3.0
a=0.0
b=1.0
stam=f(1.0)-1.0
n=4
print('N','Trapez hatası','Simpson hatası')
for i in range(6):
    print(n, '%.8f' % float(trapez(a, b, n)-stam), '%.8f' % float(simpson(a,b,n)-stam))
    n=n+4
'''
# Simpson ve Gauss karşılaştırması
'''
from numpy import *
def simpson(a,b,n):
    if n<1 or a>b:
        print('hatalı veri')
    elif n%2==1:
        print('n çift değil')
    else:
        h=(b-a)/n
        s=f(a)+f(b)
        for i in range(1,n):
            katsayi=2*(i%2+1)
            x=a+i*h
            s=s+katsayi*f(x)
        return h*s/3.0
def gaussq6(a,b,n):
    if n!=6:
        print('N SAYİSİ 6 OLMALI')
        return
    else:
        x = empty(6,float)
        w = empty(6,float)
        x[0] = -0.932469514203152
        x[1] = -0.661209386466265
        x[2] = -0.238619186083197
        x[3] = -x[2]
        x[4] = -x[1]
        x[5] = -x[0]
        w[0] = 0.171324492379170
        w[1] = 0.360761573048139
        w[2] = 0.467913934572691
        w[3] = w[2]
        w[4] = w[1]
        w[5] = w[0]
        s = 0.0
        for i in range(n):
            x[i]=((b-a)*x[i]+(b+a))/2
            s = s+w[i]*f(x[i])
        s=0.5*(b-a)*s
        return s
def f(x):
    return exp(-x)
n=6
a=0.0
b=3.0
print('Gauss = ', '%.8f' % gaussq6(a, b, n),'Simpson = ', '%.8f' % simpson(a, b, n))
'''
# Tekil integralleri hesaplamak için güzel bir yöntem(altprogram)
'''
from numpy import *
from math import *
def f(x):
    return exp(x)
def gaussqn(a,b,n):
    if n%2!=0:
        print('N sayısı çift olmalı!')
        return
    else:
        eps=3.0e-14
        x=empty(n,float)
        w=empty(n,float)
        m=(n+1)/2
        xm=0.5*(b+a)
        xl=0.5*(b-a)
        for i in range(n):
            z=cos(pi*(i+0.75)/(n+0.5))
            z1=0.0
            while(abs(z-z1))>eps:
                r1=1.0
w                r2=0.0
                for j in range(n):
                    r3=r2
                    r2=r1
                    r1=((2*j+1)*z*r2-j*r3)/float(j+1)
                rr=n*(z*r1-r2)/(z*z-1)
                z1=z
                z=z1-r1/rr
            x[i]=xm-xl*z
            x[n-1-i]=xm+xl*z
            w[i]=2.0*xl/((1.0-z*z)*rr*rr)
            w[n-1-i]=w[i]
    s=0.0
    for i in range(n):
        s=s+w[i]*f(x[i])
    return s
n=6
a=0.0
b=1.0
print('Gaussqn = ', '%.8f' % gaussqn(a, b, n))
# This method can be used for any odd integrals using the method of changing \
   # variables
'''
#Sarkac
'''
from math import *
from numpy import *
def f(x):
    return exp(x)
def trapez(a,b,n):
    if n<1 or a>b:
        print('hatalı veri')
    else:
        h=(b-a)/n
        s=(f(a)+f(b))/2
        for i in range(1,n):
            x=a+i*h
            s=s+f(x)
        return h*s
def f(x):
    global genlik
    return 1.0/sqrt(1-(sin(genlik/2)*sin(x))**2)
a=0.0
g=9.8
L=1.0
b=pi/2
t_yaklasik=2*pi*sqrt(L/g)
n=200

for i in range(13):
    genlik=5*i*pi/180
    t_tam=4*sqrt(L/g)*trapez(a,b,n)
    print('%.1f' % float(genlik*180/pi),'%.6f' % t_yaklasik, '%.6f' % t_tam)
# Gaussqn yöntemini kullansak dahi percision aynıdır, alt programlardan alıp kullanabilirsiniz
'''
# Nedir için gösteri vereceğiz


