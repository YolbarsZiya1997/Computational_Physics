#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Mar 11 16:53:39 2021

@author: ziya
"""
#Alıştırmalar(chapter II)
#Soru 2.1
'''
#2.1 soru(a)
from math import *
from numpy import *
def f(x):
    return x*log(x)
def f1(x):
    return log(x)+1

print('İleri Yöntem ','Geri Yöntem ','Tam değer ','Adım aralığı')
h = 0.001
for i in range(8):
    x=float(i+1)
    f1_ileri = (f(x+h)-f(x))/h
    f1_geri = (f(x)-f(x-h))/h
    f1_tam = f1(x)
    print('%.10f' % f1_ileri, '%.10f' % f1_geri, '%.10f' % f1_tam, '%.10f' % h )
    h=h/10.0
'''
'''
#2.1 soru(b)
from math import * 
from numpy import *
def f(x):
    return x*cos(x)-x**2*sin(x)
def f1(x):
    return (1-x**2)*cos(x)-3*x*sin(x)

print('İleri Yöntem '+'Geri Yöntem '+'Tam değer')

h=0.001
x=3
f1_ileri = (f(x+h)-f(x))/h
f1_geri = (f(x)-f(x-h))/h
f1_tam = f1(x)
print('%.10f' % f1_ileri, '%.10f' % f1_geri, '%.10f' % f1_tam)
'''
'''
#2.1 soru(c)
from math import *
from numpy import *

def f(x):
    return x*exp(x)
def f1(x):
    return (x+1)*exp(x)

h = 0.001
x = 2
f1_ileri = (f(x+h)-f(x))/h
f1_geri = (f(x)-f(x-h))/h
f1_tam = f1(x)

print('%.10f' % f1_ileri, '%.10f' % f1_geri, '%.10f' % f1_tam)
'''
#Soru 2.2
'''
# Soru 2.2 (a)
from math import *
from numpy import *

def f(x):
    return cos(pi*x)
def f2(x):
    return -1*(pi**2)*cos(pi*x)

h=0.0001
x=0.5
f2_simetrik = (f(x+h)-2*f(x)+f(x-h))/h**2
f2_ileri = ((f(x)-2*f(x+h)+f(x+2*h))/h**2)
f2_tam = f2(x)

print('%.10f' % f2_simetrik , '%.10f' % f2_ileri, '%.10f' % f2_tam)
'''
'''
#Soru 2.2 (b)
from math import *
from numpy import *
def f(x):
    return 3*x*exp(x)-cos(x)
def f2(x):
    return cos(x)+(3*x+6)*exp(x)

x=1.3
h=0.001

f2_simetrik = (f(x+h)-2*f(x)+f(x-h))/h**2
f2_ileri = (f(x)-2*f(x+h)+f(x+2*h))/h**2
f2_tam = f2(x)
print('2.dereceden Simetrik Türev  '+'2.dereceden İleri_Geri Yöntem  '+'Tam Değer')
print('%.10f' % f2_simetrik, '%.10f' % f2_ileri, '%.10f' % f2_tam)
'''
'''
#Soru 2.2 (c)
from math import *
from numpy import *
def f(x):
    return x*exp(x)
def f2(x):
    return (x+2)*exp(x)

h=0.0001
x=2
f2_simetrik = (f(x+h)-2*f(x)+f(x-h))/h**2
f2_ileri = (f(x)-2*f(x+h)+f(x+2*h))/h**2
f2_tam = f2(x)
print('%.10f' % f2_simetrik, '%.10f' % f2_ileri, '%.10f' % f2_tam)
'''
#Soru 2.3
'''
from math import *
from numpy import *
def f(x):
    return log(x)
def f2(x):
    return -1/x**2
x=1.0
h=0.1
for i in range(3):    
    f2_simetrik = (f(x+h)-2*f(x)+f(x-h))/h**2
    f2_ileri = (f(x)-2*f(x+h)+f(x+2*h))/h**2
    f2_geri = (f(x)-2*f(x-h)+f(x-2*h))/h**2
    f2_tam = f2(x)
    sim_fark= f2_tam-f2_simetrik
    ileri_fark=f2_tam-f2_ileri
    geri_fark=f2_tam-f2_geri
    print('%.5f' % h, '%.12f' % sim_fark,'%.12f' % ileri_fark,'%.12f' % geri_fark)
    h=h/10.0
'''
#Didn't understood this one?
'''
from pylab import *
from numpy import *
from math import *

def f(x,v,t):
    return -c*abs(v)**2

c=3*10**8
n=20
h=6.28*10/float(n)
t=zeros(n,float)
x=zeros(n,float)
v=zeros(n,float)
v[0]=1.0

for i in range(1,n):
    t[i]=h*i
    x[i]=v[i-1]*h+x[i-1]
    v[i]=f(x[i-1],v[i-1],t[i-1])*h+v[i-1]
    
plot(t,x,'k-')
plot(t,v,'k--')
xlabel('t')
ylabel('velocity and displacement')
show()
'''
#Soru 2.5
'''
#example 2.5 (i)
from math import * 
from numpy import *

def f(x):
    return 3*x**3+5*x-1
def trapez(a,b,n):
    if n<1 or a>b:
        print('hatalı veri')
    else:
        h=(b-a)/n
        s=(f(a)+f(b))/2
        for i in range(1,n):
            x=a+i*h
            s=s+f(x)
        return h*s
def simpson(a,b,n):
    if n<1 or a>b:
        print('hatalı veri')
    elif n%2==1:
        print('n çift değil')
    else:
        h=(b-a)/n
        s=f(a)+f(b)
        for i in range(1,n):
            katsayi=2*(i%2+1) # because in the formula the coefficient is either 2 or 4, except the first and the last one
            x=a+i*h
            s=s+katsayi*f(x)
    return h*s/3.0
a=0.0
b=1
stam=9.0/4.0
n=2
print('N ', 'Simpson error ','Trapez error ')
for i in range(8):
    n=n*2
    print(n,'%.10f' % (simpson(a, b, n)-stam),'%.10f' % (trapez(a, b, n)-stam))
# for some reason this seems unreasonable:D, simpson literally gives no error 
# which is ridiculous! But!!!! None the less, this is the correct programme
# you can plug in e^x and try it out
'''
'''
#Problem 2.5 (ii)
from math import *
from numpy import *
def f(x):
    return exp(-x)
def trapez(a,b,n):
    if n<1 or a>b:
        print('Error! Wrong choosen range')
    else:
        h=(b-a)/n
        s=(f(a)+f(b))/2
        for i in range(1,n):
            x=a+i*h
            s=s+f(x)
        return s*h
def simpson(a,b,n):
    if n<1 or a>b:
        print('Error! Wrong range')
    elif n%2==1:
        print('N is not a even number')
    else:
        h=(b-a)/n
        s=f(a)+f(b)
        for i in range(1,n):
            coefficient=2*(i%2+1)
            x=a+i*h
            s=s+coefficient*f(x)
    return s*h/3.0
a=0
b=1
stem=1-1/e
n=2
print('N ', 'Trapazoidal error','Simpson error')
for i in range(3):
    n=n*2
    print(n,'%.10f' % (trapez(a, b, n)-stem),'%.10f' % (simpson(a, b, n)-stem) )
'''
'''
# problem 2.5 (iii)
from math import *
from numpy import *
def f(x):
    return 1/x
def trapez(a,b,n):
    if n<1 or a>b:
        print('Range Error')
    else:
        h=(b-a)/n
        s=(f(a)+f(b))/2
        for i in range(1,n):
            x=a+i*h
            s=s+f(x)
        return s*h
def simpson(a,b,n):
    if n<1 or a>b:
        print('Erronious range')
    elif n%2==1:
        print('n is not a even number')
    else:
        h=(b-a)/n
        s=(f(a)+f(b))
        for i in range(1,n):
            coefficient=2*(i%2+1)
            x=a+i*h
            s=s+coefficient*f(x)
        return s*h/3.0
a=1
b=10
stem=log(10)
n=4
print('N',' Trapezoidal Error',' Simpson Error')
for i in range(8):
    print(n,'%.10f' % (trapez(a, b, n)-stem),'%.10f' % (simpson(a, b, n)-stem))
    n=n*2
'''    
'''
# Problem 2.5 (iv)        
from math import *
from numpy import *

def f(x):
    return 1/(2+x)
def trapez(a,b,n):
    if n<1 or a>b:
        print('Erronious Range')
    else:
        h=(b-a)/n
        s=(f(a)+f(b))/2
        for i in range(1,n):
            x=a+i*h
            s=s+f(x)
        return s*h
def simpson(a,b,n):
    if n<1 or a>b:
        print('Erronious Range')
    elif n%2 == 1:
        print('n is not a even number')
    else:
        h=(b-a)/n
        s=f(a)+f(b)
        for i in range(1,n):
            coefficient=2*(i%2+1)
            x=a+i*h
            s=s+coefficient*f(x)
    return s*h/3.0
a=0
b=1
stem=log(3/2)
n=2
print('N','Trapazoidal Error','Simpson Error')
for i in range(3):
    n=n*2
    print(n,'%.10f' % (trapez(a, b, n)-stem),'%.10f' % (simpson(a, b, n)-stem))
'''
'''
# Problem 2.5 (v)
from math import *
from numpy import *

def f(x):
    return cos(x)**2
def trapez(a,b,n):
    if n<1 or a>b:
        print('Erronious Range')
    else:
        h=(b-a)/n
        s=(f(a)+f(b))/2
        for i in range(1,n):
            x=a+i*h
            s=s+f(x)
        return s*h
def simpson(a,b,n):
    if n<1 or a>b:
        print('Error')
    elif n%2==1 :
        print('N is not even')
    else:
        h=(b-a)/n
        s=f(a)+f(b)
        for i in range(1,n):
            x=a+i*h
            coefficient=2*(i%2+1)
            s=s+coefficient*f(x)
    return s*h/3.0

a=0
b=pi/4.0
stem=(pi+2)/8.0
n=2
print('N','Trapazoidal Error','Simpson Error')
for i in range(3):
    n=n*2
    print(n,'%.10f' % (trapez(a, b, n)-stem),'%.10f' % (simpson(a, b, n)-stem))
'''
'''
#Problem 2.5 (vi)
from math import *
from numpy import *

def f(x):
    return 4/(1+x**2)
def trapez(a,b,n):
    if n<1 or a>b:
        print('Error')
    else:
        h=(b-a)/n
        s=(f(a)+f(b))/2
        for i in range(1,n):
            x=a+i*h
            s=s+f(x)
        return s*h
def simpson(a,b,n):
    if n<1 or a>b:
        print('Error')
    elif n%2==1:
        print('Error')
    else:
        h=(b-a)/n
        s=f(a)+f(b)
        for i in range(1,n):
            coefficient=2*(i%2+1)
            x=a+i*h
            s= s+coefficient*f(x)
        return s*h/3.0
a=0
b=1
stem=pi
n=2
print('N','Trapazoidal Error','Simpson Error')
for i in range(3):
    n=n*2
    print(n,'%.10f' % (trapez(a, b, n)-stem),'%.10f' % (simpson(a, b, n)-stem))
'''

#Debye Model
'''
Heat capacity of a solid
CV(T)=9VρkB(T/θD)^3∫(0-to-θD/T)([x^4*e^x/((e^x−1)^2)])*dx
remember that at zero, the integrand is singular.But at small values exp(x)=1+x
thus we can eliminate the singularity there
Ps: It is frustrating at times to figure out what to do with the singularity
BUT! Trust in yourself and think out of the box!!!!
'''
'''
from pylab import *
from numpy import *
def f(x):
    if a==0:
        return x**2*exp(x)
    else:
        return (x**4*exp(x))/(exp(x)-1)**2
def trapez(a,b,n):
        h=(b-a)/n
    #return x**2*exp(x)
def trapez(a,b,n):
        h=(b-a)/n
        s=(f(a)+f(b))/2
        for i in range(1,n):
            x=a+i*h
            s=s+f(x)
        return s*h
theta=300 # debye tempreture K
n=100
a=0.0
T=0.5
b=theta/T
Kb=1.3*10**(-23) # boltzmann constant J/k
T=zeros(24,float)
Cv=zeros(24,float)
T[0]=0.0
for i in range(24):
    T[i]=5*i
    Cv[i]=9*Kb*(T[i]/theta)**3*trapez(a, b, n)
    
    
plot(T,Cv,'k-')
xlabel('Tempreture')
ylabel('Cv')
show()
'''
    
            